// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client
} from './client/index.js'
import type {
  ListApplicationsData,
  ListApplicationsResponses,
  ListApplicationsErrors,
  CreatePublicApplicationData,
  CreatePublicApplicationResponses,
  CreatePublicApplicationErrors,
  CreatePrivateGithubAppApplicationData,
  CreatePrivateGithubAppApplicationResponses,
  CreatePrivateGithubAppApplicationErrors,
  CreatePrivateDeployKeyApplicationData,
  CreatePrivateDeployKeyApplicationResponses,
  CreatePrivateDeployKeyApplicationErrors,
  CreateDockerfileApplicationData,
  CreateDockerfileApplicationResponses,
  CreateDockerfileApplicationErrors,
  CreateDockerimageApplicationData,
  CreateDockerimageApplicationResponses,
  CreateDockerimageApplicationErrors,
  CreateDockercomposeApplicationData,
  CreateDockercomposeApplicationResponses,
  CreateDockercomposeApplicationErrors,
  DeleteApplicationByUuidData,
  DeleteApplicationByUuidResponses,
  DeleteApplicationByUuidErrors,
  GetApplicationByUuidData,
  GetApplicationByUuidResponses,
  GetApplicationByUuidErrors,
  UpdateApplicationByUuidData,
  UpdateApplicationByUuidResponses,
  UpdateApplicationByUuidErrors,
  GetApplicationLogsByUuidData,
  GetApplicationLogsByUuidResponses,
  GetApplicationLogsByUuidErrors,
  ListEnvsByApplicationUuidData,
  ListEnvsByApplicationUuidResponses,
  ListEnvsByApplicationUuidErrors,
  UpdateEnvByApplicationUuidData,
  UpdateEnvByApplicationUuidResponses,
  UpdateEnvByApplicationUuidErrors,
  CreateEnvByApplicationUuidData,
  CreateEnvByApplicationUuidResponses,
  CreateEnvByApplicationUuidErrors,
  UpdateEnvsByApplicationUuidData,
  UpdateEnvsByApplicationUuidResponses,
  UpdateEnvsByApplicationUuidErrors,
  DeleteEnvByApplicationUuidData,
  DeleteEnvByApplicationUuidResponses,
  DeleteEnvByApplicationUuidErrors,
  StartApplicationByUuidData,
  StartApplicationByUuidResponses,
  StartApplicationByUuidErrors,
  StopApplicationByUuidData,
  StopApplicationByUuidResponses,
  StopApplicationByUuidErrors,
  RestartApplicationByUuidData,
  RestartApplicationByUuidResponses,
  RestartApplicationByUuidErrors,
  ListDatabasesData,
  ListDatabasesResponses,
  ListDatabasesErrors,
  DeleteDatabaseByUuidData,
  DeleteDatabaseByUuidResponses,
  DeleteDatabaseByUuidErrors,
  GetDatabaseByUuidData,
  GetDatabaseByUuidResponses,
  GetDatabaseByUuidErrors,
  UpdateDatabaseByUuidData,
  UpdateDatabaseByUuidResponses,
  UpdateDatabaseByUuidErrors,
  CreateDatabasePostgresqlData,
  CreateDatabasePostgresqlResponses,
  CreateDatabasePostgresqlErrors,
  CreateDatabaseClickhouseData,
  CreateDatabaseClickhouseResponses,
  CreateDatabaseClickhouseErrors,
  CreateDatabaseDragonflyData,
  CreateDatabaseDragonflyResponses,
  CreateDatabaseDragonflyErrors,
  CreateDatabaseRedisData,
  CreateDatabaseRedisResponses,
  CreateDatabaseRedisErrors,
  CreateDatabaseKeydbData,
  CreateDatabaseKeydbResponses,
  CreateDatabaseKeydbErrors,
  CreateDatabaseMariadbData,
  CreateDatabaseMariadbResponses,
  CreateDatabaseMariadbErrors,
  CreateDatabaseMysqlData,
  CreateDatabaseMysqlResponses,
  CreateDatabaseMysqlErrors,
  CreateDatabaseMongodbData,
  CreateDatabaseMongodbResponses,
  CreateDatabaseMongodbErrors,
  StartDatabaseByUuidData,
  StartDatabaseByUuidResponses,
  StartDatabaseByUuidErrors,
  StopDatabaseByUuidData,
  StopDatabaseByUuidResponses,
  StopDatabaseByUuidErrors,
  RestartDatabaseByUuidData,
  RestartDatabaseByUuidResponses,
  RestartDatabaseByUuidErrors,
  ListDeploymentsData,
  ListDeploymentsResponses,
  ListDeploymentsErrors,
  GetDeploymentByUuidData,
  GetDeploymentByUuidResponses,
  GetDeploymentByUuidErrors,
  DeployByTagOrUuidData,
  DeployByTagOrUuidResponses,
  DeployByTagOrUuidErrors,
  ListDeploymentsByAppUuidData,
  ListDeploymentsByAppUuidResponses,
  ListDeploymentsByAppUuidErrors,
  VersionData,
  VersionResponses,
  VersionErrors,
  EnableApiData,
  EnableApiResponses,
  EnableApiErrors,
  DisableApiData,
  DisableApiResponses,
  DisableApiErrors,
  HealthcheckData,
  HealthcheckResponses,
  HealthcheckErrors,
  ListProjectsData,
  ListProjectsResponses,
  ListProjectsErrors,
  CreateProjectData,
  CreateProjectResponses,
  CreateProjectErrors,
  DeleteProjectByUuidData,
  DeleteProjectByUuidResponses,
  DeleteProjectByUuidErrors,
  GetProjectByUuidData,
  GetProjectByUuidResponses,
  GetProjectByUuidErrors,
  UpdateProjectByUuidData,
  UpdateProjectByUuidResponses,
  UpdateProjectByUuidErrors,
  GetEnvironmentByNameOrUuidData,
  GetEnvironmentByNameOrUuidResponses,
  GetEnvironmentByNameOrUuidErrors,
  ListResourcesData,
  ListResourcesResponses,
  ListResourcesErrors,
  ListPrivateKeysData,
  ListPrivateKeysResponses,
  ListPrivateKeysErrors,
  UpdatePrivateKeyData,
  UpdatePrivateKeyResponses,
  UpdatePrivateKeyErrors,
  CreatePrivateKeyData,
  CreatePrivateKeyResponses,
  CreatePrivateKeyErrors,
  DeletePrivateKeyByUuidData,
  DeletePrivateKeyByUuidResponses,
  DeletePrivateKeyByUuidErrors,
  GetPrivateKeyByUuidData,
  GetPrivateKeyByUuidResponses,
  GetPrivateKeyByUuidErrors,
  ListServersData,
  ListServersResponses,
  ListServersErrors,
  CreateServerData,
  CreateServerResponses,
  CreateServerErrors,
  DeleteServerByUuidData,
  DeleteServerByUuidResponses,
  DeleteServerByUuidErrors,
  GetServerByUuidData,
  GetServerByUuidResponses,
  GetServerByUuidErrors,
  UpdateServerByUuidData,
  UpdateServerByUuidResponses,
  UpdateServerByUuidErrors,
  GetResourcesByServerUuidData,
  GetResourcesByServerUuidResponses,
  GetResourcesByServerUuidErrors,
  GetDomainsByServerUuidData,
  GetDomainsByServerUuidResponses,
  GetDomainsByServerUuidErrors,
  ValidateServerByUuidData,
  ValidateServerByUuidResponses,
  ValidateServerByUuidErrors,
  ListServicesData,
  ListServicesResponses,
  ListServicesErrors,
  CreateServiceData,
  CreateServiceResponses,
  CreateServiceErrors,
  DeleteServiceByUuidData,
  DeleteServiceByUuidResponses,
  DeleteServiceByUuidErrors,
  GetServiceByUuidData,
  GetServiceByUuidResponses,
  GetServiceByUuidErrors,
  UpdateServiceByUuidData,
  UpdateServiceByUuidResponses,
  UpdateServiceByUuidErrors,
  ListEnvsByServiceUuidData,
  ListEnvsByServiceUuidResponses,
  ListEnvsByServiceUuidErrors,
  UpdateEnvByServiceUuidData,
  UpdateEnvByServiceUuidResponses,
  UpdateEnvByServiceUuidErrors,
  CreateEnvByServiceUuidData,
  CreateEnvByServiceUuidResponses,
  CreateEnvByServiceUuidErrors,
  UpdateEnvsByServiceUuidData,
  UpdateEnvsByServiceUuidResponses,
  UpdateEnvsByServiceUuidErrors,
  DeleteEnvByServiceUuidData,
  DeleteEnvByServiceUuidResponses,
  DeleteEnvByServiceUuidErrors,
  StartServiceByUuidData,
  StartServiceByUuidResponses,
  StartServiceByUuidErrors,
  StopServiceByUuidData,
  StopServiceByUuidResponses,
  StopServiceByUuidErrors,
  RestartServiceByUuidData,
  RestartServiceByUuidResponses,
  RestartServiceByUuidErrors,
  ListTeamsData,
  ListTeamsResponses,
  ListTeamsErrors,
  GetTeamByIdData,
  GetTeamByIdResponses,
  GetTeamByIdErrors,
  GetMembersByTeamIdData,
  GetMembersByTeamIdResponses,
  GetMembersByTeamIdErrors,
  GetCurrentTeamData,
  GetCurrentTeamResponses,
  GetCurrentTeamErrors,
  GetCurrentTeamMembersData,
  GetCurrentTeamMembersResponses,
  GetCurrentTeamMembersErrors
} from './types.gen.js'
import { client as _heyApiClient } from './client.gen.js'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * List
 * List all applications.
 */
export const listApplications = <ThrowOnError extends boolean = false>(
  options?: Options<ListApplicationsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListApplicationsResponses,
    ListApplicationsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/applications',
    ...options
  })
}

/**
 * Create (Public)
 * Create new application based on a public git repository.
 */
export const createPublicApplication = <ThrowOnError extends boolean = false>(
  options: Options<CreatePublicApplicationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreatePublicApplicationResponses,
    CreatePublicApplicationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/applications/public',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Create (Private - GH App)
 * Create new application based on a private repository through a Github App.
 */
export const createPrivateGithubAppApplication = <
  ThrowOnError extends boolean = false
>(
  options: Options<CreatePrivateGithubAppApplicationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreatePrivateGithubAppApplicationResponses,
    CreatePrivateGithubAppApplicationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/applications/private-github-app',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Create (Private - Deploy Key)
 * Create new application based on a private repository through a Deploy Key.
 */
export const createPrivateDeployKeyApplication = <
  ThrowOnError extends boolean = false
>(
  options: Options<CreatePrivateDeployKeyApplicationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreatePrivateDeployKeyApplicationResponses,
    CreatePrivateDeployKeyApplicationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/applications/private-deploy-key',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Create (Dockerfile)
 * Create new application based on a simple Dockerfile.
 */
export const createDockerfileApplication = <
  ThrowOnError extends boolean = false
>(
  options: Options<CreateDockerfileApplicationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateDockerfileApplicationResponses,
    CreateDockerfileApplicationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/applications/dockerfile',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Create (Docker Image)
 * Create new application based on a prebuilt docker image
 */
export const createDockerimageApplication = <
  ThrowOnError extends boolean = false
>(
  options: Options<CreateDockerimageApplicationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateDockerimageApplicationResponses,
    CreateDockerimageApplicationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/applications/dockerimage',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Create (Docker Compose)
 * Create new application based on a docker-compose file.
 */
export const createDockercomposeApplication = <
  ThrowOnError extends boolean = false
>(
  options: Options<CreateDockercomposeApplicationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateDockercomposeApplicationResponses,
    CreateDockercomposeApplicationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/applications/dockercompose',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Delete
 * Delete application by UUID.
 */
export const deleteApplicationByUuid = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApplicationByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApplicationByUuidResponses,
    DeleteApplicationByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/applications/{uuid}',
    ...options
  })
}

/**
 * Get
 * Get application by UUID.
 */
export const getApplicationByUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetApplicationByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApplicationByUuidResponses,
    GetApplicationByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/applications/{uuid}',
    ...options
  })
}

/**
 * Update
 * Update application by UUID.
 */
export const updateApplicationByUuid = <ThrowOnError extends boolean = false>(
  options: Options<UpdateApplicationByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateApplicationByUuidResponses,
    UpdateApplicationByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/applications/{uuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Get application logs.
 * Get application logs by UUID.
 */
export const getApplicationLogsByUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetApplicationLogsByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApplicationLogsByUuidResponses,
    GetApplicationLogsByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/applications/{uuid}/logs',
    ...options
  })
}

/**
 * List Envs
 * List all envs by application UUID.
 */
export const listEnvsByApplicationUuid = <ThrowOnError extends boolean = false>(
  options: Options<ListEnvsByApplicationUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListEnvsByApplicationUuidResponses,
    ListEnvsByApplicationUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/applications/{uuid}/envs',
    ...options
  })
}

/**
 * Update Env
 * Update env by application UUID.
 */
export const updateEnvByApplicationUuid = <
  ThrowOnError extends boolean = false
>(
  options: Options<UpdateEnvByApplicationUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateEnvByApplicationUuidResponses,
    UpdateEnvByApplicationUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/applications/{uuid}/envs',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Create Env
 * Create env by application UUID.
 */
export const createEnvByApplicationUuid = <
  ThrowOnError extends boolean = false
>(
  options: Options<CreateEnvByApplicationUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateEnvByApplicationUuidResponses,
    CreateEnvByApplicationUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/applications/{uuid}/envs',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Update Envs (Bulk)
 * Update multiple envs by application UUID.
 */
export const updateEnvsByApplicationUuid = <
  ThrowOnError extends boolean = false
>(
  options: Options<UpdateEnvsByApplicationUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateEnvsByApplicationUuidResponses,
    UpdateEnvsByApplicationUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/applications/{uuid}/envs/bulk',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Delete Env
 * Delete env by UUID.
 */
export const deleteEnvByApplicationUuid = <
  ThrowOnError extends boolean = false
>(
  options: Options<DeleteEnvByApplicationUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteEnvByApplicationUuidResponses,
    DeleteEnvByApplicationUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/applications/{uuid}/envs/{env_uuid}',
    ...options
  })
}

/**
 * Start
 * Start application. `Post` request is also accepted.
 */
export const startApplicationByUuid = <ThrowOnError extends boolean = false>(
  options: Options<StartApplicationByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    StartApplicationByUuidResponses,
    StartApplicationByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/applications/{uuid}/start',
    ...options
  })
}

/**
 * Stop
 * Stop application. `Post` request is also accepted.
 */
export const stopApplicationByUuid = <ThrowOnError extends boolean = false>(
  options: Options<StopApplicationByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    StopApplicationByUuidResponses,
    StopApplicationByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/applications/{uuid}/stop',
    ...options
  })
}

/**
 * Restart
 * Restart application. `Post` request is also accepted.
 */
export const restartApplicationByUuid = <ThrowOnError extends boolean = false>(
  options: Options<RestartApplicationByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    RestartApplicationByUuidResponses,
    RestartApplicationByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/applications/{uuid}/restart',
    ...options
  })
}

/**
 * List
 * List all databases.
 */
export const listDatabases = <ThrowOnError extends boolean = false>(
  options?: Options<ListDatabasesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListDatabasesResponses,
    ListDatabasesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/databases',
    ...options
  })
}

/**
 * Delete
 * Delete database by UUID.
 */
export const deleteDatabaseByUuid = <ThrowOnError extends boolean = false>(
  options: Options<DeleteDatabaseByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteDatabaseByUuidResponses,
    DeleteDatabaseByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/databases/{uuid}',
    ...options
  })
}

/**
 * Get
 * Get database by UUID.
 */
export const getDatabaseByUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetDatabaseByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetDatabaseByUuidResponses,
    GetDatabaseByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/databases/{uuid}',
    ...options
  })
}

/**
 * Update
 * Update database by UUID.
 */
export const updateDatabaseByUuid = <ThrowOnError extends boolean = false>(
  options: Options<UpdateDatabaseByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateDatabaseByUuidResponses,
    UpdateDatabaseByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/databases/{uuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Create (PostgreSQL)
 * Create a new PostgreSQL database.
 */
export const createDatabasePostgresql = <ThrowOnError extends boolean = false>(
  options: Options<CreateDatabasePostgresqlData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateDatabasePostgresqlResponses,
    CreateDatabasePostgresqlErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/databases/postgresql',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Create (Clickhouse)
 * Create a new Clickhouse database.
 */
export const createDatabaseClickhouse = <ThrowOnError extends boolean = false>(
  options: Options<CreateDatabaseClickhouseData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateDatabaseClickhouseResponses,
    CreateDatabaseClickhouseErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/databases/clickhouse',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Create (DragonFly)
 * Create a new DragonFly database.
 */
export const createDatabaseDragonfly = <ThrowOnError extends boolean = false>(
  options: Options<CreateDatabaseDragonflyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateDatabaseDragonflyResponses,
    CreateDatabaseDragonflyErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/databases/dragonfly',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Create (Redis)
 * Create a new Redis database.
 */
export const createDatabaseRedis = <ThrowOnError extends boolean = false>(
  options: Options<CreateDatabaseRedisData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateDatabaseRedisResponses,
    CreateDatabaseRedisErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/databases/redis',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Create (KeyDB)
 * Create a new KeyDB database.
 */
export const createDatabaseKeydb = <ThrowOnError extends boolean = false>(
  options: Options<CreateDatabaseKeydbData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateDatabaseKeydbResponses,
    CreateDatabaseKeydbErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/databases/keydb',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Create (MariaDB)
 * Create a new MariaDB database.
 */
export const createDatabaseMariadb = <ThrowOnError extends boolean = false>(
  options: Options<CreateDatabaseMariadbData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateDatabaseMariadbResponses,
    CreateDatabaseMariadbErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/databases/mariadb',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Create (MySQL)
 * Create a new MySQL database.
 */
export const createDatabaseMysql = <ThrowOnError extends boolean = false>(
  options: Options<CreateDatabaseMysqlData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateDatabaseMysqlResponses,
    CreateDatabaseMysqlErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/databases/mysql',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Create (MongoDB)
 * Create a new MongoDB database.
 */
export const createDatabaseMongodb = <ThrowOnError extends boolean = false>(
  options: Options<CreateDatabaseMongodbData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateDatabaseMongodbResponses,
    CreateDatabaseMongodbErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/databases/mongodb',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Start
 * Start database. `Post` request is also accepted.
 */
export const startDatabaseByUuid = <ThrowOnError extends boolean = false>(
  options: Options<StartDatabaseByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    StartDatabaseByUuidResponses,
    StartDatabaseByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/databases/{uuid}/start',
    ...options
  })
}

/**
 * Stop
 * Stop database. `Post` request is also accepted.
 */
export const stopDatabaseByUuid = <ThrowOnError extends boolean = false>(
  options: Options<StopDatabaseByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    StopDatabaseByUuidResponses,
    StopDatabaseByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/databases/{uuid}/stop',
    ...options
  })
}

/**
 * Restart
 * Restart database. `Post` request is also accepted.
 */
export const restartDatabaseByUuid = <ThrowOnError extends boolean = false>(
  options: Options<RestartDatabaseByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    RestartDatabaseByUuidResponses,
    RestartDatabaseByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/databases/{uuid}/restart',
    ...options
  })
}

/**
 * List
 * List currently running deployments
 */
export const listDeployments = <ThrowOnError extends boolean = false>(
  options?: Options<ListDeploymentsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListDeploymentsResponses,
    ListDeploymentsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/deployments',
    ...options
  })
}

/**
 * Get
 * Get deployment by UUID.
 */
export const getDeploymentByUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetDeploymentByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetDeploymentByUuidResponses,
    GetDeploymentByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/deployments/{uuid}',
    ...options
  })
}

/**
 * Deploy
 * Deploy by tag or uuid. `Post` request also accepted with `uuid` and `tag` json body.
 */
export const deployByTagOrUuid = <ThrowOnError extends boolean = false>(
  options?: Options<DeployByTagOrUuidData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    DeployByTagOrUuidResponses,
    DeployByTagOrUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/deploy',
    ...options
  })
}

/**
 * List application deployments
 * List application deployments by using the app uuid
 */
export const listDeploymentsByAppUuid = <ThrowOnError extends boolean = false>(
  options: Options<ListDeploymentsByAppUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListDeploymentsByAppUuidResponses,
    ListDeploymentsByAppUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/deployments/applications/{uuid}',
    ...options
  })
}

/**
 * Version
 * Get Coolify version.
 */
export const version = <ThrowOnError extends boolean = false>(
  options?: Options<VersionData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    VersionResponses,
    VersionErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/version',
    ...options
  })
}

/**
 * Enable API
 * Enable API (only with root permissions).
 */
export const enableApi = <ThrowOnError extends boolean = false>(
  options?: Options<EnableApiData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    EnableApiResponses,
    EnableApiErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/enable',
    ...options
  })
}

/**
 * Disable API
 * Disable API (only with root permissions).
 */
export const disableApi = <ThrowOnError extends boolean = false>(
  options?: Options<DisableApiData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    DisableApiResponses,
    DisableApiErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/disable',
    ...options
  })
}

/**
 * Healthcheck
 * Healthcheck endpoint.
 */
export const healthcheck = <ThrowOnError extends boolean = false>(
  options?: Options<HealthcheckData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    HealthcheckResponses,
    HealthcheckErrors,
    ThrowOnError
  >({
    url: '/health',
    ...options
  })
}

/**
 * List
 * List projects.
 */
export const listProjects = <ThrowOnError extends boolean = false>(
  options?: Options<ListProjectsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListProjectsResponses,
    ListProjectsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/projects',
    ...options
  })
}

/**
 * Create
 * Create Project.
 */
export const createProject = <ThrowOnError extends boolean = false>(
  options: Options<CreateProjectData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateProjectResponses,
    CreateProjectErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/projects',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Delete
 * Delete project by UUID.
 */
export const deleteProjectByUuid = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProjectByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteProjectByUuidResponses,
    DeleteProjectByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/projects/{uuid}',
    ...options
  })
}

/**
 * Get
 * Get project by UUID.
 */
export const getProjectByUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetProjectByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetProjectByUuidResponses,
    GetProjectByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/projects/{uuid}',
    ...options
  })
}

/**
 * Update
 * Update Project.
 */
export const updateProjectByUuid = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProjectByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateProjectByUuidResponses,
    UpdateProjectByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/projects/{uuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Environment
 * Get environment by name or UUID.
 */
export const getEnvironmentByNameOrUuid = <
  ThrowOnError extends boolean = false
>(
  options: Options<GetEnvironmentByNameOrUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetEnvironmentByNameOrUuidResponses,
    GetEnvironmentByNameOrUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/projects/{uuid}/{environment_name_or_uuid}',
    ...options
  })
}

/**
 * List
 * Get all resources.
 */
export const listResources = <ThrowOnError extends boolean = false>(
  options?: Options<ListResourcesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListResourcesResponses,
    ListResourcesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/resources',
    ...options
  })
}

/**
 * List
 * List all private keys.
 */
export const listPrivateKeys = <ThrowOnError extends boolean = false>(
  options?: Options<ListPrivateKeysData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListPrivateKeysResponses,
    ListPrivateKeysErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/security/keys',
    ...options
  })
}

/**
 * Update
 * Update a private key.
 */
export const updatePrivateKey = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePrivateKeyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdatePrivateKeyResponses,
    UpdatePrivateKeyErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/security/keys',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Create
 * Create a new private key.
 */
export const createPrivateKey = <ThrowOnError extends boolean = false>(
  options: Options<CreatePrivateKeyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreatePrivateKeyResponses,
    CreatePrivateKeyErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/security/keys',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Delete
 * Delete a private key.
 */
export const deletePrivateKeyByUuid = <ThrowOnError extends boolean = false>(
  options: Options<DeletePrivateKeyByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeletePrivateKeyByUuidResponses,
    DeletePrivateKeyByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/security/keys/{uuid}',
    ...options
  })
}

/**
 * Get
 * Get key by UUID.
 */
export const getPrivateKeyByUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetPrivateKeyByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetPrivateKeyByUuidResponses,
    GetPrivateKeyByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/security/keys/{uuid}',
    ...options
  })
}

/**
 * List
 * List all servers.
 */
export const listServers = <ThrowOnError extends boolean = false>(
  options?: Options<ListServersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListServersResponses,
    ListServersErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/servers',
    ...options
  })
}

/**
 * Create
 * Create Server.
 */
export const createServer = <ThrowOnError extends boolean = false>(
  options: Options<CreateServerData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateServerResponses,
    CreateServerErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/servers',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Delete
 * Delete server by UUID.
 */
export const deleteServerByUuid = <ThrowOnError extends boolean = false>(
  options: Options<DeleteServerByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteServerByUuidResponses,
    DeleteServerByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/servers/{uuid}',
    ...options
  })
}

/**
 * Get
 * Get server by UUID.
 */
export const getServerByUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetServerByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetServerByUuidResponses,
    GetServerByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/servers/{uuid}',
    ...options
  })
}

/**
 * Update
 * Update Server.
 */
export const updateServerByUuid = <ThrowOnError extends boolean = false>(
  options: Options<UpdateServerByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateServerByUuidResponses,
    UpdateServerByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/servers/{uuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Resources
 * Get resources by server.
 */
export const getResourcesByServerUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetResourcesByServerUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetResourcesByServerUuidResponses,
    GetResourcesByServerUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/servers/{uuid}/resources',
    ...options
  })
}

/**
 * Domains
 * Get domains by server.
 */
export const getDomainsByServerUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetDomainsByServerUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetDomainsByServerUuidResponses,
    GetDomainsByServerUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/servers/{uuid}/domains',
    ...options
  })
}

/**
 * Validate
 * Validate server by UUID.
 */
export const validateServerByUuid = <ThrowOnError extends boolean = false>(
  options: Options<ValidateServerByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ValidateServerByUuidResponses,
    ValidateServerByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/servers/{uuid}/validate',
    ...options
  })
}

/**
 * List
 * List all services.
 */
export const listServices = <ThrowOnError extends boolean = false>(
  options?: Options<ListServicesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListServicesResponses,
    ListServicesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/services',
    ...options
  })
}

/**
 * Create service
 * Create a one-click / custom service
 */
export const createService = <ThrowOnError extends boolean = false>(
  options: Options<CreateServiceData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateServiceResponses,
    CreateServiceErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/services',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Delete
 * Delete service by UUID.
 */
export const deleteServiceByUuid = <ThrowOnError extends boolean = false>(
  options: Options<DeleteServiceByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteServiceByUuidResponses,
    DeleteServiceByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/services/{uuid}',
    ...options
  })
}

/**
 * Get
 * Get service by UUID.
 */
export const getServiceByUuid = <ThrowOnError extends boolean = false>(
  options: Options<GetServiceByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetServiceByUuidResponses,
    GetServiceByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/services/{uuid}',
    ...options
  })
}

/**
 * Update
 * Update service by UUID.
 */
export const updateServiceByUuid = <ThrowOnError extends boolean = false>(
  options: Options<UpdateServiceByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateServiceByUuidResponses,
    UpdateServiceByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/services/{uuid}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * List Envs
 * List all envs by service UUID.
 */
export const listEnvsByServiceUuid = <ThrowOnError extends boolean = false>(
  options: Options<ListEnvsByServiceUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListEnvsByServiceUuidResponses,
    ListEnvsByServiceUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/services/{uuid}/envs',
    ...options
  })
}

/**
 * Update Env
 * Update env by service UUID.
 */
export const updateEnvByServiceUuid = <ThrowOnError extends boolean = false>(
  options: Options<UpdateEnvByServiceUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateEnvByServiceUuidResponses,
    UpdateEnvByServiceUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/services/{uuid}/envs',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Create Env
 * Create env by service UUID.
 */
export const createEnvByServiceUuid = <ThrowOnError extends boolean = false>(
  options: Options<CreateEnvByServiceUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateEnvByServiceUuidResponses,
    CreateEnvByServiceUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/services/{uuid}/envs',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Update Envs (Bulk)
 * Update multiple envs by service UUID.
 */
export const updateEnvsByServiceUuid = <ThrowOnError extends boolean = false>(
  options: Options<UpdateEnvsByServiceUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateEnvsByServiceUuidResponses,
    UpdateEnvsByServiceUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/services/{uuid}/envs/bulk',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Delete Env
 * Delete env by UUID.
 */
export const deleteEnvByServiceUuid = <ThrowOnError extends boolean = false>(
  options: Options<DeleteEnvByServiceUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteEnvByServiceUuidResponses,
    DeleteEnvByServiceUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/services/{uuid}/envs/{env_uuid}',
    ...options
  })
}

/**
 * Start
 * Start service. `Post` request is also accepted.
 */
export const startServiceByUuid = <ThrowOnError extends boolean = false>(
  options: Options<StartServiceByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    StartServiceByUuidResponses,
    StartServiceByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/services/{uuid}/start',
    ...options
  })
}

/**
 * Stop
 * Stop service. `Post` request is also accepted.
 */
export const stopServiceByUuid = <ThrowOnError extends boolean = false>(
  options: Options<StopServiceByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    StopServiceByUuidResponses,
    StopServiceByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/services/{uuid}/stop',
    ...options
  })
}

/**
 * Restart
 * Restart service. `Post` request is also accepted.
 */
export const restartServiceByUuid = <ThrowOnError extends boolean = false>(
  options: Options<RestartServiceByUuidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    RestartServiceByUuidResponses,
    RestartServiceByUuidErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/services/{uuid}/restart',
    ...options
  })
}

/**
 * List
 * Get all teams.
 */
export const listTeams = <ThrowOnError extends boolean = false>(
  options?: Options<ListTeamsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListTeamsResponses,
    ListTeamsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/teams',
    ...options
  })
}

/**
 * Get
 * Get team by TeamId.
 */
export const getTeamById = <ThrowOnError extends boolean = false>(
  options: Options<GetTeamByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetTeamByIdResponses,
    GetTeamByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/teams/{id}',
    ...options
  })
}

/**
 * Members
 * Get members by TeamId.
 */
export const getMembersByTeamId = <ThrowOnError extends boolean = false>(
  options: Options<GetMembersByTeamIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetMembersByTeamIdResponses,
    GetMembersByTeamIdErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/teams/{id}/members',
    ...options
  })
}

/**
 * Authenticated Team
 * Get currently authenticated team.
 */
export const getCurrentTeam = <ThrowOnError extends boolean = false>(
  options?: Options<GetCurrentTeamData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCurrentTeamResponses,
    GetCurrentTeamErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/teams/current',
    ...options
  })
}

/**
 * Authenticated Team Members
 * Get currently authenticated team members.
 */
export const getCurrentTeamMembers = <ThrowOnError extends boolean = false>(
  options?: Options<GetCurrentTeamMembersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCurrentTeamMembersResponses,
    GetCurrentTeamMembersErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/teams/current/members',
    ...options
  })
}
